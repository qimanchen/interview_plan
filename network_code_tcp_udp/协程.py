#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
协程
一个线程中的函数，可以在任何地方保存当前函数的一些临时变量信息，然后切换到另外一个函数中执行
而不是通过调用函数的方式实现的，并且切换的次数以及什么时候再切换到原来的函数都是由开发者自己决定

协程只是切换操作cpu的上下文
而线程需要变换数据的缓存Cache

协程是系统不感知的，让需要执行的协程更多的获得cpu时间才是问题关键

协程设计框架： 1:N 一个线程放置多个协程

协程自己主动让出cpu，当协程自己执行不下去了，则调度器会执行

问题：
	当一个线程没有IO操作时，自己不会主动触发调度器调度 -- 所以要避免
	
IO密集型 -- 需要大量的IO调度，减少线程调度 -- 异步IO

协程对于高CPU密集型的程序没啥好处

"""

# 简单协程的实现
import time

def A():
	while True:
		print("---A---")
		yield
		time.sleep(0.5)
		
def B(c):
	while True:
		print("---B---")
		next(c)
		time.sleep(0.5)
		
	
if __name__ == "__main__":
	a = A()
	B(a)

