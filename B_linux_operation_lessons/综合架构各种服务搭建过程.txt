# 综合架构服务搭建
# Linux中服务的搭建流程
	1. 下载并安装软件
	2. 编写配置文件
	-- 后面步骤可以根据配置文件的需求来进行
	3. 搭建服务环境
	4. 启动服务
	5. 测试服务功能
	
# rsync
	01. rsync服务搭建 -- 备份服务器
		备份服务器ip：172.16.1.41
		待备份服务器ip：172.16.1.31
		1. 检查是否已安装rsync软件
			rpm -qa | grep rsync
			yum install -y rsync
		2. 编写配置文件
			man rsyncd.conf -- 参考配置文件说明
			vim /etc/rsyncd.conf
		3. 创建rsync服务的虚拟用户 -- rsync
			useradd rsync -M -s /sbin/nologin
		4. 创建备份服务器的认证文件 -- 秘密
			mkdir -p /etc/rsync.password
			chmod 600 /etc/rsync.password  -- 修改权限，并确保安全性
		5. 创建备份目录
			mkdir -p /backup
			chown rsync.rsync /backup -- 修改备份目录所属用户
		6. 启动备份服务
			systemctl start rsyncd 
			systemctl enable rsyncd -- 开启自启
			systemctl status rsyncd -- 查看服务启动状态
		7. 测试服务
			在172.16.1.31服务器上执行命令
				rsync -avz /etc/hots rsync_backup@172.16.1.41::backup
	02. 客户端配置 -- 172.16.1.31
		1. 为免交互实现文件备份，创建一个密码登录
			echo "centos" > /etc/rsync.password -- ！！ 这个密码是针对认证用户的
			chmod 600 /etc/rsync.password -- 修改权限，确保文件的安全性
		2. 测试文件备份
			rsync -avz /etc/hots rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password
	03. rsync相关参数说明
		-v	--verbose 显示详细的传输信息
		-a	--archive 命令的归档参数 包含 rtopgDl
		-r	--recuri 递归参数
		-t	--times 保持文件属性时间信息不变，修改时间
		-o	--owner 保持文件的属主信息不变
		-g	--group 保持文件的属组信息不变
			vim /etc/rsyncd.conf
			以root用户作为管理用户
			# fake super = no 才能保证这个参数生效
		-p	--perms 保持文件权限信息不变
		-D			保持设备文件信息不变
		-l	--links	保持软连接属性信息不变
		-L	--		保持链接文件数据信息不变
			rsync -rtopgD -L
		-P(大写)			显示数据传输的进度信息
		--exclude=patterm 排除指定数据不被传输，单个排除 
			该排除文件的路径时相对于备份的相对路径，并且其位置如下所示
				rsync -avz /etc --exclude=b/1.txt --exclude=c/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password
		--exclude-from=file 批量排除
		--bwlimit=rate	限制传输的速率 100M/8 = 12.5MB
			企业案例：人人网
		--delete		无差异同步参数，保持两台服务高度一致（慎用）
						我有的你有，我没有的你也不能有
			rsync -avz --delete /空目录 rsync_backup@172.16.1.41::backup
			意义：
				当存储服务器中删除了时，则无差异数据同步到备份服务器中
# nfs
	01. nfs服务部署
		1. 下载安装软件
			rpm -qa | grep -E "nfs|rpc"
			yum install -y nfs-utils rpcbind
		2. 编写配置文件
			vim /etc/exports
			- 配置文件格式
				01	02(03)
				01 -- 设置数据的存储目录 /data
				02 -- 设置网络白名单
				03 -- 配置存储目录的权限信息，存储目录的一些功能
				/data 172.16.1.0/24(rw,sync)
				-- 可以参考/var/lib/nfs/etab 中nfs的默认配置
		3. 创建一个存储目录
			mkdir -p /data
			chown nfsnobody.nfsnobody /data
		4. 启动服务程序
			a 先启动rpc服务
				systemctl start rpcbind.service
				systemctl enable rpcbind.service
				netstat -tunlp | grep rpc # 验证服务是否启动， 同样可以查看端口111
			b 启动nfs服务
				systemctl start nfs
				systemctl enable nfs
				rpcinfo -p 172.16.1.31 or rpcinfo -p localhost
	02. 客户端配置
		1. 安装nfs服务软件
			yum install -y nfs-utils # centos7默认不支持nfs格式的文件系统
		2. 挂载网络目录
			mount -t nfs 172.16.1.31:/data /mnt
			-- 设置开启自启
				方法一：
					echo "mount -t nfs 172.16.1.31:/data /mnt" >> /etc/rc.local
					ps: 注意/etc/rc.local目录需要有执行权限
				方法二：
					/et/fstab
					172.16.1.31:/data       /mnt    nfs     defaults        0 0
					ps：注意针对centos6 netfs服务需要启动，centos7 remote-fs.target服务需要启动
		# 如果服务挂载不上的排查方法
			# 服务端：
				1. 检查nfs进程信息是否在rpc中注册
					rpcinfo -p localhost
					-- 可能服务为开机自启动
				2. 检查有没有可用存储目录
					showmount -e 172.16.1.31
				3. 在服务进行挂载测试
					mount -t nfs 172.16.31:/data /mnt # 挂载自身
			# 客户端：
				1. 检查nfs进程信息是否注册
				rpcinfo -p localhost/172.16.1.31
				问题原因：
					服务启动顺序不对，没有启动nfs服务
				2. 检查有没有可用存储目录
					showmount -e 172.16.1.31 查看是否有共享的目录
					问题原因：配置文件，重启nfs服务
					网络问题
						ping
						telnet
# 实时同步服务
	01. 部署好rsync服务 -- 备份服务器 172.16.1.41
	02. 部署inotify监控服务 -- 待同步服务器 172.16.1.31
		1. 安装inotify软件
			yum install -y inotify-tools
		2. 测试inotify
			inotifywait -- 监控目录数据信息变化
			inotifywait -mqr --timefmt “%F" --format "%T  %w %f 事件信息：%e"-e CREATE /data
				--format
					%T 时间信息
					%w 监控变化的数据的目录信息
					%f 文件
					%e 事件信息 CREATE
	03. 部署sersync同步服务
		a 下载软件，并上传到linux服务器
			git clone https://github.com/wsgzao/sersync
		b 解压软件压缩包
			-- 确定一下相应的目录
			sersync
				├── bin		--- sersync软件命令目录
				│?? └── sersync
				├── conf	--- sersync软件配置目录
				│?? └── confxml.xml
				└── logs	--- sersync软件日志目录
		c 编写配置文件
			vim conf/confxml.xml
				实现数据过滤
					<filter start="false">
						<exclude expression="(.*)\.svn"></exclude>
						<exclude expression="(.*)\.gz"></exclude>
						<exclude expression="^info/*"></exclude>
						<exclude expression="^static/*"></exclude>
					</filter>
					排除指定数据信息不要进行实时传输同步
				inotify：
					<inotify>
						<delete start="true"/>
						<createFolder start="true"/>
						<createFile start="false"/>
						<closeWrite start="true"/>
						<moveFrom start="true"/>
						<moveTo start="true"/>
						<attrib start="false"/>
						<modify start="false"/>
					</inotify>
					加载inotify事件信息 -- 需要监控的事件
				核心部分
					<localpath watch="/data"> -- rsync的备份目录
						<remote ip="172.16.1.41" name="nfsbackup"/> -- 备份服务器的地址，模块信息
						<!--<remote ip="192.168.8.39" name="tongbu"/>-->  -- 多个备用服务器
						<!--<remote ip="192.168.8.40" name="tongbu"/>-->
					</localpath>
					<rsync>
						<commonParams params="-az"/> -- rsync参数备份
						<auth start="true" users="rsync_backup" passwordfile="/etc/rsync.passsword"/> 指定rsync认证用户 指定rsync认证文件
						<userDefinedPort start="false" port="874"/><!-- port=874 -->
						<timeout start="false" time="100"/><!-- timeout=100 -->
						<ssh start="false"/>
					</rsync>
		d 启动sersync
			sersync/bin/sersync
			chmod a+x sersync/bin/sersync
			export PATH=$PATH:/usr/local/sersync/bin -- 将命令加入到命令路径中
		e 测试服务
			sersync -dro /usr/local/sersync/conf/confxml.xml	# 启动实时同步服务
			/etc/rc.local -- sersync -dro /usr/local/sersync/conf/confxml.xml
# ssh服务
	# 基于秘钥连接
		1. 管理端生成密钥对	172.16.1.61
			ssh-keygen -t dsa
			生成文件在/root/.ssh/
		2. 管理端分发公钥
			ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41
			在服务端会生成 /root/.ssh/authorized_keys文件
			# 在ssh-copy-id 实现脚本批量处理
				1. 免密
					a 安装 sshpass
						yum install -y sshpass
						sshpass -p密码
					b 测试
						sshpass -p password ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41
				2. 首次连接免交互
					sshpass -p password ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41 "-o StrictHostKeyChecking=no"
				3. 端口不是默认端口
					sshpass -p password ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.41 -p newPort "-o StrictHostKeyChecking=no"
		3. 进行远程连接测试
			ssh 172.16.1.41 -- 不用输入密码信息
	# 几点说明
		/etc/ssh/ssh_config -- 作为ssh客户端配置文件
		/etc/ssh/sshd_config -- 作为ssh服务端配置文件
		
		