# 变量的数值计算实践
	1. 算数运算
		-- 常用运算符
			+,-,*,/,% -- 加减乘除，求余
			** -- 幂运算
			++,-- 自加自减
			!,&&,|| -- 非，and，or
			<,<=,>,>= -- 比较
			==,!=,=
			<<,>> 左移，右移
			~,^,&,| -- 按位取反，按位异或，按位与，按位或
		-- shell中常用的算数运算命令
			(()) -- 用于整数运算，效率很高
			let -- 用于整数运算，类似于(())
			expr -- 可用于整数运算，但还有其他额外功能
			bc -- linux下的计算器程序，适合整数，小数运算
			$[] -- 用于整数运算
			awk -- 可用于整数运算，也可用于小数运算
			declare -- 定义变量值和属性，-i参数可以用于定义整形变量，做运算
	2. (()) -- 数值运算
		-- 操作方法
			((i=i+1)) -- echo $((i=i+1))
			i=$((i+1))
			((8>7&&5==5)) -- 可以进行比较操作，还可以加入逻辑与和或，用于条件判断
			echo $((2+1)) -- 直接输出结果
		-- 内部内容两端无论有多少个空格都无所谓
		-- 执行运算时，不用加$符号，但赋值和输出时，需要添加$符号
		-- 计算器
			最简单方法
			bash test.sh 1+2
			#!/bin/bash
			echo $(($1))
	3. let运算命令
		let 赋值表达式  等效于  (())
		let i=i+8 <==> ((i=i+8)) 后者效率更高
	4. expr
		expr 求值表达式
		expr 2 + 2
		expr 2 \* 2 -- 注意乘法要用\*表示
		PS：expr注意事项
			1. 运算符两端至少一个空格
		i=`expr $i + 6`
		PS:通过expr判断一个数或字符串是否为整数
			expr $i + 6 &> /dev/null
			[ $? -ne 0 ] &&{
				echo "first number($1) DON'T integer, Please input integer."
				exit 2
			}
		PS:通过expr判断文件拓展命名是否符合要求
			if `expr "$1" : ".*\.pub" &> /dev/null`;then
				echo "you are using $1"
			else
				echo "Please use *.pub file."
			fi
		PS:通过expr计算字符串长度
			expr length "$char"
			echo ${#char}
			echo ${char} | wc -L
			echo ${char} | awk '{print length($0)}'
	5. bc 用法 -- 支持小数运算 -- 通过管道传递，计算速度较慢
		echo 3.3+5 | bc
		echo "scale=2;255/133" | bc 保留两位小数
		-- 计算 1加到10累加
			seq -s "+" 10 # seq -s 指定分隔符
			echo {1..10} | tr " " "+" | bc
	6. awk， 小数整数运算 -- 更推荐作为小数运算
		echo "7.7 3.8" | awk '{print ($1-$2)}'
		echo "358 113" | awk '{print ($1-3)/$2}'
	7. declare
		declare -i A=30 B=7 # -i 指定变量类型
		A=A+B # 因此可以直接相加
	8. $[]
	9. 基于shell变量输入read命令
		read -- bash 内置命令 -- 通过help read查看帮助信息
		- 语法
			read [参数] [变量名]
		- 参数
			-p prompt 设置提示信息
			-t timeout 设置输入等待时间，单位默认为秒
		- ex
			read -t 10 -p "prompt" num
		- 判断变量是否为空
			[ ${#a} -le 0 ] && {
				echo "the first num is null."
				exit 1
			}
		