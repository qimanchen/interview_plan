# while and util
	- 循环语句，重复执行一条指令或一组指令
	- while, until, for, select
	- while 常用于守护进程或持续运行的程序
	1. while循环
		- 语法
			while 条件
			do
				...
			done
		- 判断一直为真
			while true or while [ 1 ]
		usleep 20000000 # 单位微妙
	2. until循环
		- 语法
			until 条件
			do
				...
			done
		条件表示是不成立时，进入循环执行指令
	3. shell终端中防止程序执行中断的方法
		a) sh /server/scripts/test.sh & # 将命令放到程序后台
		b) nohup /server/scripts/test.sh & # 使用nohup和&在后台执行脚本
		c) 使用screen保持会话，然后再执行命令或脚本
	4. shell脚本后台执行
		sh test.sh & -- 后台执行test.sh，终端不能关闭
		ctrl+c 停止
		ctrl+z 暂停执行
		bg -- 将当前脚本放到后台执行
		fg -- 将后台脚本放到前台 -- fg 2
		jobs -- 当前执行的脚本或任务数
		kill -- 关闭脚本任务 kill %任务编号
	5. linux进程相关的命令
		kill, killall, pkill -- 杀死进程
		ps -- 查看进程
		pstree -- 显示进程状态树
		top -- 显示进程
		renice -- 改变优先权
		nohup 用户退出系统之后继续工作
		pgrep 查找匹配条件的进程
		strace 跟踪一个进程的系统调用情况
		ltrace 跟踪进程调用库函数情况
		((--i))
	- 求和
		i=100
		sum=i*(i+1)/2
	6. while 循环按行读取文件
		a 采用exec读取文件，然后进入while循环处理
			exec < FILE
			sum=0
			while read line
			do
				cmd
			done
		b 使用cat读取文件内容，然后进入管道进行while循环处理
			cat FILE | while read line
			do
				cmd
			done
		c 在while循环结尾done处输入重定向
			while read line
			do
				cmd
			done<FILE
		-- while 实现cat功能
			while read line
			do
				echo $line
			done<FILE
	-- 防ddos脚本
		iptables -l INPUT -s IP地址 -j DROP
	7. 小结
		1）while适用于频率小于1分钟的循环处理
		2）case语句可以用if语句替换，少量固定规则字符时，多用case语句
		3）条件表达式用于简短的条件判断及输出（文件是否存在，字符串是否为空等
		4）if取值判断，多用于不同值数量较少情况
		5）for常用于正常循环处理中
		6）while多用于守护进程、无限循环（sleep，usleep控制频率）
		7）case多用于服务启动脚本，打印菜单可用select语句（用的较少）
		8）函数，编码逻辑清晰，减少重复语句开发