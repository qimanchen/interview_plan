# Shell变量知识进阶与实践
	1. shell中特殊变量（重要的）
		1）特殊位置参数变量
			$0 -- 脚本路径
				若执行为，bash test.sh -- $0 -- test.sh
				若执行为，bash /server/scripts/test.sh -- /server/scripts/test.sh
				dirname /server/scripts/test.sh -- /server/scripts # 必须使用绝对路径，若使用相对路径，返回值为.
				basename /server/scripts/test.sh -- test.sh
			$n -- 脚本的第n个参数，n大于9时需要${n}
			$* -- 当前shell脚本所有传递的参数，若加引号"$*"表示"$1 $2 $3"
			$@ -- 前shell脚本所有传递的参数，若加引号"$*"表示"$1" "$2" "$3"
			$# -- 参数个数
		2）/etc/rc.local/rpcbind start
			通过case函数将相应的值来确定相应操作 start stop status
		-- set -- "I am" handsome qiman
		echo "$@" -- 可以分割带有空格的参数
		shift -- 将位置参数移位 -- 左移
		3）shell进程中特殊状态变量
			$? -- 获取上一个指令的执行状态返回值（0成功，非零失败）
			$$ -- 获取当前执行的shell脚本的进程号PID
			$! -- 获取上一个在后台运行进程的进程号PID
			$_ -- 获取前一个执行命令的最后一个参数
			PS：可通过man bash 查找关键字 special parameters
			-- 实例编译安装nginx
				1. yum install pcre-devel openssl-devel -y
				2. wget -q http://nginx.org/download/nginx-1.10.1.tar.gz
				3. tar xf nginx-1.10.1.tar.gz
				4. cd nginx-1.10.1
				5. ./configure --prefix=/application/nginx-1.10.1 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module #还有一些配置需要添加
				6. echo $?
				7. make
			# 经常使用$? 确定命令是否成功执行
			-- 企业环境中，$?用法
				1）判断命令、脚本或函数等程序是否执行成功
				2）通过使用exit，将对应错误状态返回给$?
				3）如果在函数中，通过return数字，将这个数字以函数返回值的形式传递给$?
		-- 实例，分析脚本中$?，rpcbind中stop函数
			function stop() {
				echo -n $"Stopping $prog: "
				killproc $prog
				RETVAL=$?
				echo 
				[ $RETVAL -eq 0 ] && {
					rm -f /var/lock/subsys/$prog
					rm -f /var/run/rpcbind*
				}
				return $RETVAL
			}
		
		-- $$ 特殊变量功能与实践
			1）获取脚本执行的进程号
				#!/bin/bash
				# test_pid.sh
				echo $$ > /tmp/a.pid
				sleep 300
			2）系统中多次执行某个脚本后的进程只有一个（企业应用）
				-- 相同脚本只能有一个在运行
				#!/bin/bash
				# pid.sh
				pidpath=/tmp/a.pid
				# 杀死之前的存在的进程
				if [ -f "$pidpath" ]; then
					kill `cat $pidpath` > /dev/null 2>&1
					rm -f $pidpath
				fi
				echo $$ > $pidpath -- 将当前pid记录到pid文件中
				sleep 300
				
	2. bash Shell内置变量命令
		- 常用的内置命令，echo, eval, exec, export, read, shift
		- echo 在屏幕输出信息
			参数：
				-n 不换行输出
				-e 解析转义字符
					\n 换行
					\r 回车
					\t tab
					\b 退格
					\v 纵向制表符
		- eval args
			读入参数args，并将它们组合成一个新的命令
			# eval.sh
				eval "echo \$$#"
			sh eval.sh arg1 arg2
			输出：arg2
		- exec 不创建新子进程，转去执行指定的命令，当该命令执行完毕，该进程也就完毕
			-- 在终端中使用该命令会直接退出shell登录
			-- 可用于处理文件内容
				-- exec打开文件，read命令每次会将文件指针移动到文件的下一行进行读取，直到文件末尾
				#!/bin/bash
				exec < /tmp/tmp.log
				while read line # 利用read一行行读取处理
				do
					echo $line
				done
				echo ok

		- read 从标准输入读取字符串等信息，传给shell程序内部定义的变量
		- shift 将位置参数向左位移一定位置，$#减一
			-- 应用：命令行控制参数，
				-c oldboy
				sh shift.sh -c oldboy
		- exit 退出shell程序，并可以指定返回状态
	3. shell变量子串知识
		1）shell变量子串
			${parameter} -- 返回变量$parameter内容
			${#parameter} -- 返回变量的内容长度（字符数） -- 该方法最快
				expr length "$qiman" -- 也可以获取子串长度
				echo "$qiman" | awk '{print length($0)}'
				seq -s "qiman" 100 -- 使用"qiman"字符作为分隔符 （默认为\n）
			${parameter:offset} -- 从位置offset之后开始提取到子串结尾
			${parameter:offset:length} -- 从offset之后开始提取长度为length的子串
			${parameter#word} -- 从头开始匹配最短的word字符，并删除
			${parameter##word} -- 从头开始匹配最长的word字符，并删除
			${parameter%word} -- 从尾开始匹配最短的word字符，并删除
			${parameter%%word} -- 从尾开始匹配最长的word字符，并删除
			${parameter/pattern/string} -- 从头开始匹配一次规则字符，并以string替换
			${parameter//pattern/string} -- 从头开始全部匹配规则字符，并以string替换
		-- 尽量使用内置自带的
			mv $file `echo ${file/_finished/}`
			rename "finished" "" * -- 批量改名
			rename .jpg .qiman * -- 批量改拓展名
	4. shell特殊拓展变量知识与实践
		1）拓展变量介绍
			${parameter:-word} -- 如果parameter变量值为空或未赋值，则word字符代替最为变量值，防止空值异常
			${parameter:=word} -- 如果parameter变量值为空或未赋值，则word字符代替最为变量值，并对parameter赋值
				位置和特殊变量不可用，确保没有定义的变量始终有值
			${parameter:?word} -- 如果parameter变量值为空或未赋值，则word字符作为标准错误输出，否则输出变量值
				用于捕捉由于变量未定义而导致的错误，并退出程序
			${parameter:+word} -- 如果parameter变量值为空或未赋值，啥也不干，则word字符作为替换变量值
				用于检测变量是否存在，存在则会打印word字符
			-- 运算符仅用来检测对应的变量是否未赋值或者NULL值，加上冒号，才判断是否为""