# shell脚本条件测试与比较
	1. 条件测试
		- 常用测试方法
			1) test <测试表达式>
				test -f file -- 文件是否存在，存在为true
				test -z "oldboy" -- 测试字符串是否为0，为0返回true
					-n 反过来
				
			2) [ <测试表达式> ] -- 表达式两端必须存在一个空格
				[ -f test.sh ]
			3）[[ <测试表达式> ]] -- 表达式两端必须存在一个空格， --可以进行通配符比较 -- 用&& || > <
				[[ -f test.sh ]]
			4) ((<测试表达式>)) -- 表达式两端不是很必要存在一个空格
	2. 文件测试表达式
		PS: 以下描述的都是条件为真的情况
		-d file -- 文件存在且为目录
		-f file -- 文件存在且为普通文件
		-e file -- 文件存在
		# 针对当前用户，前提文件存在
		-r -- 可读
		-s -- 大小不为0
		-w -- 可写
		-x -- 可执行 executable
		-L -- 为链接文件
		f1 -nt f2 文件f1比文件f2新
		f1 -ot f2 文件f1比文件f2旧
		
		-- 表示文件名的变量加上引号，（字符串加上引号）
			[ -f "$oldboy" ]
		# 脚本判断时，可以直接通过部分判断完成任务，-- 更为简洁
	3. 特殊条件表达式
		[ 条件1 ] &&{
			命令1
			命令2
			命令3
		}
	4. 字符串测试表达式
		- 两个字符是否相同
		- 测试字符长度是否为0
		- 字符串是否为NULL
		--操作符
			-n 字符串长度不为0
			-z 字符串长度为0
			"str1" == "str2"
			"str1" != "str2"
		-- 注意事项
			1. 字符串变量要加""
			2. 比较符两端要有空格，否则会导致逻辑错误
			3. bash区分0长度字符串和空字符串（NULL）
	5. 整数二元符
		-eq
		-ne
		-gt
		-ge
		-lt
		-le
		-- []中使用< >需用发斜线转义
		-- 比较符两端要有空格
		-- [[]] -- 正则匹配
		-- (())不能使用-eq等
		-- 判断前要判断是否为整数，否则会报错
			-bash: [: 1.1: integer expression expected
	6. 逻辑操作符
		[] or test 		[[]] or (())
		与-a				&&（可以用于多个条件并列
		或-o				||
		非!				!
		echo -n 不换行
	-- 将数字括起来，可以使用 == 判断
		var="str" or 1
		[ "$var" == "2" ]
	
	-- 通配符匹配 -- 判断是为1,2,3
		[[ "$a" =~ [1-3] ]]